LANGUAGE


computers don't understand our language, see everything as big streams of numbers.

TOKENIZE
into continuous tokens of characters breaking on whitespace

1.234 sky morey;
--- becomes ---
number: 1.234
string: sky
string: morey
string: ;

sometimes we want to represent a token with the space retained, use quotes

"sky morey";
--- becomes ---
string: sky morey

this becomes an issue if we want to also represent a " in a token. then we get into escaping.

"sky \"morey\" was here";
--- becomes ---
string: sky "morey" was here
string: ;

escape characters and encoding sequences are based on the language. usualy a special character for escape, but then you have to escape the escape \ -> \\

in c, c++, c#, javascript.
\\ = \
\" = quote
\n = return
\t = tab



LEXICON

this is where the compiler or instruction handler applys meaning to the stream of tok ens recieved, based on the syntax of the language.

based on the language the compiler will understand the syntax, or throw a syntax error.

SQL:
Select MyField
From MyTable
Where MyField = 'MyValue';

c, c++:
int age = 10;
printf("%d\n", age);

HTML:
<a href="value">text</a>

CSS:
.small { background: solid black }